
#include<bits/stdc++.h>
using namespace std;

#define INF 0x3f3f3f3f

void dijkstra(vector<pair<int,int>> graph[], int verti,int src){
  priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
  
  vector<int> dist(verti,INF);

  pq.push(make_pair(0,src));
  dist[src]=0;

  while(!pq.empty()){
      int u=pq.top().second;
      pq.pop();
      for(auto itr=graph[u].begin() ;itr!=graph[u].end() ;itr++){

          int v=(*itr).first;
          int weight=(*itr).second;

          if(dist[u]+weight<dist[v]){
             dist[v]=dist[u]+weight;
             pq.push(make_pair(dist[v],v));
          }
      }
  }
  for(int i=0; i<verti;i++){
      cout<<i<<"--->"<<dist[i]<<endl;
  }
}

int main(){
    int v,e;
    cin>>v>>e;

    vector<pair<int,int>> graph[v];
    for(int i=0; i <e ; i++){
        int x,y,w;
        cin>>x>>y>>w;
        graph[x].push_back({y,w});
        graph[y].push_back({x,w});
    }

    dijkstra(graph,v,0);

}
