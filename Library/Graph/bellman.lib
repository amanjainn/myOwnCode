
#include<bits/stdc++.h>
using namespace std;

void bellmanFord (vector<pair<int,pair<int,int>>> Graph,int ver,int e, int src){
  int V=ver;
  int E=e;
  int dist[V];

  for(int i = 0; i<V;i++)
      dist[i]=INT_MAX;
  dist[src]=0;    
  
  for(int j=0 ; j<V-1; j++){
      for(int i=0  ;i<E; i++){
          int u=Graph[i].first;
          int v= Graph[i].second.first;
          int weight=Graph[i].second.second;

          if(dist[u]+weight<dist[v] && dist[u]!=INT_MAX){
              dist[v]=dist[u]+weight;
          }
      }
  }
  

//   Check for negative weight cycle
 for(int i=0  ;i<E; i++){
          int u=Graph[i].first;
          int v= Graph[i].second.first;
          int weight=Graph[i].second.second;

          if(dist[u]+weight<dist[v] && dist[u]!=INT_MAX){
              cout<<"Graph contains negative weight cycle"<<endl;
              return;
          }
      }
         for(int i=0 ; i<V; i++){
      cout<<i<<" --->"<<dist[i]<<endl;
  }
 
}

int main(){
    int v,e;
    cin>>v>>e;
    vector<pair<int,pair<int,int>>> Graph;
    for(int i=0 ; i<e; i++){
        int x,y,w;
        cin>>x>>y>>w;
        Graph.push_back({x,{y,w}});
    }
    bellmanFord(Graph,v,e,0);
}